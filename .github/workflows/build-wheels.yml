name: Build and upload to PyPI

# Build on every branch push, tag push, and pull request change:
on: [push, pull_request]

jobs:
  build_wheels:
    name: Build wheels on ${{ matrix.archs }} for ${{ matrix.os }}
    
    strategy:
      fail-fast: false
      matrix:
        name:
            - armhf-linux
            - aarch64-linux
            - x86_64-linux-dbg
            - x86_64-macos
            - x86_64-win
            - i686-win
            - i686-linux
        include:
          - name: armhf-linux
            host: arm-linux-gnueabihf
            os: ubuntu-22.04
            arch: arm32v7
          - name: aarch64-linux
            host: aarch64-linux-gnu
            os: ubuntu-22.04
            arch: arm64v8
          - name: x86_64-linux-dbg
            host: x86_64-pc-linux-gnu
            os: ubuntu-22.04
            arch: amd64
          - name: i686-linux
            host: i686-pc-linux-gnu
            os: ubuntu-22.04
            arch: i386
          - name: x86_64-macos
            host: x86_64-apple-darwin14
            os: macos-latest
            arch: amd64
          - name: x86_64-win
            host: x86_64-w64-mingw32
            os: windows-latest
            arch: amd64
            plat-name: amd64
          - name: i686-win
            host: i686-w64-mingw32
            os: windows-latest
            arch: i386
            plat-name: win32

    runs-on: ${{ matrix.os }}

    steps:
      - uses: actions/checkout@v3

      - name: Set up QEMU
        if: runner.os == 'Linux'
        uses: docker/setup-qemu-action@v2
        with:
          platforms: all
      
      - name: Set up Docker Buildx
        if: runner.os == 'Linux'
        uses: docker/setup-buildx-action@v1

      - name: Build wheels for ${{ matrix.host }}
        if: runner.os == 'Linux'
        run: |
          docker buildx build \
          -t xanimo/python-libdogecoin:${{ matrix.arch }} \
          --build-arg FLAVOR=${FLAVOR:-"bullseye"} \
          --build-arg ARCH=${{ matrix.arch }} \
          --build-arg TARGET_HOST=${{ matrix.host }} \
          --target artifact \
          --output type=local,dest=. .

      - name: Setup WSL
        if: runner.os == 'Windows'
        uses: Vampire/setup-wsl@v1.3.1

      - uses: actions/setup-python@v4
        if: runner.os != 'Linux' && runner.os != 'Windows'
        name: Install Python
        with:
          python-version: '3.10'
      - run: pip install --upgrade cython setuptools build requests pytest

      - name: Build wheels for ${{ matrix.host }}
        if: runner.os == 'Windows'
        run: |
            mkdir -p ./wheels
            bash ./bin/init --arch=${{ matrix.plat-name }}

      - name: Build wheels for ${{ matrix.host }}
        if: matrix.host == 'x86_64-apple-darwin14'
        env: 
          host: ${{ matrix.host }}
        run: |
          mkdir -p wheels
          python -m fetch --host=${{ matrix.host }}
          python -m build \
          -C--build-option=egg_info \
          -C--build-option=--tag-build=0.1.0 -w
          TARGET_WHEEL=$(find . -maxdepth 2 -type f -regex ".*libdogecoin-.*")
          python -m pip install --upgrade wheel pytest
          wheel unpack "$TARGET_WHEEL"
          cp -r ../tests ./libdogecoin-0.1.0/
          pushd ./libdogecoin-0.1.0
              python -m pytest
          popd
          cp dist/*.whl ./wheels

      - uses: actions/upload-artifact@v2
        with:
          path: ./wheels/*.whl

  build_sdist:
    name: Build source distribution
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - uses: actions/setup-python@v2
        name: Install Python
        with:
          python-version: '3.10'
      - run: pip install --upgrade pip cython setuptools build

      - name: Build sdist
        run: |
            mkdir -p wheels
            python -m build -s
            cp dist/*.tar.gz ./wheels

      - uses: actions/upload-artifact@v2
        with:
          path: wheels/*.tar.gz

  upload_pypi:
    needs: [build_wheels, build_sdist]
    runs-on: ubuntu-latest
    # upload to PyPI on every tag starting with 'v'
    if: github.event_name == 'push' && startsWith(github.event.ref, 'refs/tags/v')
    steps:
      - uses: actions/download-artifact@v2
        with:
          name: artifact
          path: dist

      - uses: pypa/gh-action-pypi-publish@master
        with:
          user: __token__
          password: ${{ secrets.pypi_password }}
